ARM GAS  C:\Users\nhantt\AppData\Local\Temp\ccqsIyKt.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"u8g2_ll_hvline.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.u8g2_ll_hvline_vertical_top_lsb,"ax",%progbits
  16              		.align	1
  17              		.global	u8g2_ll_hvline_vertical_top_lsb
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	u8g2_ll_hvline_vertical_top_lsb:
  24              	.LFB0:
  25              		.file 1 "u8g2/csrc/u8g2_ll_hvline.c"
   1:u8g2/csrc/u8g2_ll_hvline.c **** /*
   2:u8g2/csrc/u8g2_ll_hvline.c **** 
   3:u8g2/csrc/u8g2_ll_hvline.c ****   u8g2_ll_hvline.c
   4:u8g2/csrc/u8g2_ll_hvline.c ****   
   5:u8g2/csrc/u8g2_ll_hvline.c ****   low level hvline
   6:u8g2/csrc/u8g2_ll_hvline.c **** 
   7:u8g2/csrc/u8g2_ll_hvline.c ****   Universal 8bit Graphics Library (https://github.com/olikraus/u8g2/)
   8:u8g2/csrc/u8g2_ll_hvline.c **** 
   9:u8g2/csrc/u8g2_ll_hvline.c ****   Copyright (c) 2016, olikraus@gmail.com
  10:u8g2/csrc/u8g2_ll_hvline.c ****   All rights reserved.
  11:u8g2/csrc/u8g2_ll_hvline.c **** 
  12:u8g2/csrc/u8g2_ll_hvline.c ****   Redistribution and use in source and binary forms, with or without modification, 
  13:u8g2/csrc/u8g2_ll_hvline.c ****   are permitted provided that the following conditions are met:
  14:u8g2/csrc/u8g2_ll_hvline.c **** 
  15:u8g2/csrc/u8g2_ll_hvline.c ****   * Redistributions of source code must retain the above copyright notice, this list 
  16:u8g2/csrc/u8g2_ll_hvline.c ****     of conditions and the following disclaimer.
  17:u8g2/csrc/u8g2_ll_hvline.c ****     
  18:u8g2/csrc/u8g2_ll_hvline.c ****   * Redistributions in binary form must reproduce the above copyright notice, this 
  19:u8g2/csrc/u8g2_ll_hvline.c ****     list of conditions and the following disclaimer in the documentation and/or other 
  20:u8g2/csrc/u8g2_ll_hvline.c ****     materials provided with the distribution.
  21:u8g2/csrc/u8g2_ll_hvline.c **** 
  22:u8g2/csrc/u8g2_ll_hvline.c ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND 
  23:u8g2/csrc/u8g2_ll_hvline.c ****   CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
  24:u8g2/csrc/u8g2_ll_hvline.c ****   INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
  25:u8g2/csrc/u8g2_ll_hvline.c ****   MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
  26:u8g2/csrc/u8g2_ll_hvline.c ****   DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
  27:u8g2/csrc/u8g2_ll_hvline.c ****   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
  28:u8g2/csrc/u8g2_ll_hvline.c ****   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  29:u8g2/csrc/u8g2_ll_hvline.c ****   NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
  30:u8g2/csrc/u8g2_ll_hvline.c ****   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
  31:u8g2/csrc/u8g2_ll_hvline.c ****   CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
  32:u8g2/csrc/u8g2_ll_hvline.c ****   STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  33:u8g2/csrc/u8g2_ll_hvline.c ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
ARM GAS  C:\Users\nhantt\AppData\Local\Temp\ccqsIyKt.s 			page 2


  34:u8g2/csrc/u8g2_ll_hvline.c ****   ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  
  35:u8g2/csrc/u8g2_ll_hvline.c **** 
  36:u8g2/csrc/u8g2_ll_hvline.c **** 
  37:u8g2/csrc/u8g2_ll_hvline.c ****   *ptr |= or_mask
  38:u8g2/csrc/u8g2_ll_hvline.c ****   *ptr ^= xor_mask
  39:u8g2/csrc/u8g2_ll_hvline.c ****   
  40:u8g2/csrc/u8g2_ll_hvline.c ****   color = 0:   or_mask = 1, xor_mask = 1
  41:u8g2/csrc/u8g2_ll_hvline.c ****   color = 1:   or_mask = 1, xor_mask = 0
  42:u8g2/csrc/u8g2_ll_hvline.c ****   color = 2:   or_mask = 0, xor_mask = 1
  43:u8g2/csrc/u8g2_ll_hvline.c **** 
  44:u8g2/csrc/u8g2_ll_hvline.c ****   if ( color <= 1 )
  45:u8g2/csrc/u8g2_ll_hvline.c ****     or_mask  = mask;
  46:u8g2/csrc/u8g2_ll_hvline.c ****   if ( color != 1 )
  47:u8g2/csrc/u8g2_ll_hvline.c ****     xor_mask = mask;
  48:u8g2/csrc/u8g2_ll_hvline.c ****     
  49:u8g2/csrc/u8g2_ll_hvline.c **** */
  50:u8g2/csrc/u8g2_ll_hvline.c **** 
  51:u8g2/csrc/u8g2_ll_hvline.c **** #include "u8g2.h"
  52:u8g2/csrc/u8g2_ll_hvline.c **** #include <assert.h>
  53:u8g2/csrc/u8g2_ll_hvline.c **** 
  54:u8g2/csrc/u8g2_ll_hvline.c **** /*=================================================*/
  55:u8g2/csrc/u8g2_ll_hvline.c **** /*
  56:u8g2/csrc/u8g2_ll_hvline.c ****   u8g2_ll_hvline_vertical_top_lsb
  57:u8g2/csrc/u8g2_ll_hvline.c ****     SSD13xx
  58:u8g2/csrc/u8g2_ll_hvline.c ****     UC1701    
  59:u8g2/csrc/u8g2_ll_hvline.c **** */
  60:u8g2/csrc/u8g2_ll_hvline.c **** 
  61:u8g2/csrc/u8g2_ll_hvline.c **** 
  62:u8g2/csrc/u8g2_ll_hvline.c **** #ifdef U8G2_HVLINE_SPEED_OPTIMIZATION
  63:u8g2/csrc/u8g2_ll_hvline.c **** 
  64:u8g2/csrc/u8g2_ll_hvline.c **** /*
  65:u8g2/csrc/u8g2_ll_hvline.c ****   x,y		Upper left position of the line within the local buffer (not the display!)
  66:u8g2/csrc/u8g2_ll_hvline.c ****   len		length of the line in pixel, len must not be 0
  67:u8g2/csrc/u8g2_ll_hvline.c ****   dir		0: horizontal line (left to right)
  68:u8g2/csrc/u8g2_ll_hvline.c **** 		1: vertical line (top to bottom)
  69:u8g2/csrc/u8g2_ll_hvline.c ****   asumption: 
  70:u8g2/csrc/u8g2_ll_hvline.c ****     all clipping done
  71:u8g2/csrc/u8g2_ll_hvline.c **** */
  72:u8g2/csrc/u8g2_ll_hvline.c **** void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, u
  73:u8g2/csrc/u8g2_ll_hvline.c **** {
  26              		.loc 1 73 0
  27              		.cfi_startproc
  28              		@ args = 4, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              	.LVL0:
  31 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 20
  34              		.cfi_offset 4, -20
  35              		.cfi_offset 5, -16
  36              		.cfi_offset 6, -12
  37              		.cfi_offset 7, -8
  38              		.cfi_offset 14, -4
  39 0002 9DF814E0 		ldrb	lr, [sp, #20]	@ zero_extendqisi2
  40              	.LVL1:
  74:u8g2/csrc/u8g2_ll_hvline.c ****   uint16_t offset;
  75:u8g2/csrc/u8g2_ll_hvline.c ****   uint8_t *ptr;
ARM GAS  C:\Users\nhantt\AppData\Local\Temp\ccqsIyKt.s 			page 3


  76:u8g2/csrc/u8g2_ll_hvline.c ****   uint8_t bit_pos, mask;
  77:u8g2/csrc/u8g2_ll_hvline.c ****   uint8_t or_mask, xor_mask;
  78:u8g2/csrc/u8g2_ll_hvline.c **** 
  79:u8g2/csrc/u8g2_ll_hvline.c ****   //assert(x >= u8g2->buf_x0);
  80:u8g2/csrc/u8g2_ll_hvline.c ****   //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  81:u8g2/csrc/u8g2_ll_hvline.c ****   //assert(y >= u8g2->buf_y0);
  82:u8g2/csrc/u8g2_ll_hvline.c ****   //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  83:u8g2/csrc/u8g2_ll_hvline.c ****   
  84:u8g2/csrc/u8g2_ll_hvline.c ****   /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  85:u8g2/csrc/u8g2_ll_hvline.c ****   bit_pos = y;		/* overflow truncate is ok here... */
  86:u8g2/csrc/u8g2_ll_hvline.c ****   bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
  41              		.loc 1 86 0
  42 0006 02F00704 		and	r4, r2, #7
  43              	.LVL2:
  87:u8g2/csrc/u8g2_ll_hvline.c ****   mask = 1;
  88:u8g2/csrc/u8g2_ll_hvline.c ****   mask <<= bit_pos;
  44              		.loc 1 88 0
  45 000a 0125     		movs	r5, #1
  46 000c A540     		lsls	r5, r5, r4
  47 000e EDB2     		uxtb	r5, r5
  48              	.LVL3:
  89:u8g2/csrc/u8g2_ll_hvline.c **** 
  90:u8g2/csrc/u8g2_ll_hvline.c ****   or_mask = 0;
  91:u8g2/csrc/u8g2_ll_hvline.c ****   xor_mask = 0;
  92:u8g2/csrc/u8g2_ll_hvline.c ****   if ( u8g2->draw_color <= 1 )
  49              		.loc 1 92 0
  50 0010 90F87D70 		ldrb	r7, [r0, #125]	@ zero_extendqisi2
  51 0014 012F     		cmp	r7, #1
  52 0016 19D9     		bls	.L10
  90:u8g2/csrc/u8g2_ll_hvline.c ****   xor_mask = 0;
  53              		.loc 1 90 0
  54 0018 0026     		movs	r6, #0
  55              	.L2:
  56              	.LVL4:
  93:u8g2/csrc/u8g2_ll_hvline.c ****     or_mask  = mask;
  94:u8g2/csrc/u8g2_ll_hvline.c ****   if ( u8g2->draw_color != 1 )
  57              		.loc 1 94 0
  58 001a 012F     		cmp	r7, #1
  59 001c 18D0     		beq	.L14
  60              	.LVL5:
  61              	.L3:
  95:u8g2/csrc/u8g2_ll_hvline.c ****     xor_mask = mask;
  96:u8g2/csrc/u8g2_ll_hvline.c **** 
  97:u8g2/csrc/u8g2_ll_hvline.c **** 
  98:u8g2/csrc/u8g2_ll_hvline.c ****   offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
  99:u8g2/csrc/u8g2_ll_hvline.c ****   offset &= ~7;
  62              		.loc 1 99 0
  63 001e 02F0F802 		and	r2, r2, #248
  64              	.LVL6:
 100:u8g2/csrc/u8g2_ll_hvline.c ****   offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
  65              		.loc 1 100 0
  66 0022 0768     		ldr	r7, [r0]
  67 0024 97F810C0 		ldrb	ip, [r7, #16]	@ zero_extendqisi2
  68              	.LVL7:
 101:u8g2/csrc/u8g2_ll_hvline.c ****   ptr = u8g2->tile_buf_ptr;
  69              		.loc 1 101 0
  70 0028 476B     		ldr	r7, [r0, #52]
ARM GAS  C:\Users\nhantt\AppData\Local\Temp\ccqsIyKt.s 			page 4


  71              	.LVL8:
 102:u8g2/csrc/u8g2_ll_hvline.c ****   ptr += offset;
 103:u8g2/csrc/u8g2_ll_hvline.c ****   ptr += x;
  72              		.loc 1 103 0
  73 002a 0CFB0211 		mla	r1, ip, r2, r1
  74              	.LVL9:
  75 002e 3944     		add	r1, r1, r7
  76              	.LVL10:
 104:u8g2/csrc/u8g2_ll_hvline.c ****   
 105:u8g2/csrc/u8g2_ll_hvline.c ****   if ( dir == 0 )
  77              		.loc 1 105 0
  78 0030 BEF1000F 		cmp	lr, #0
  79 0034 15D1     		bne	.L4
  80              	.LVL11:
  81              	.L5:
 106:u8g2/csrc/u8g2_ll_hvline.c ****   {
 107:u8g2/csrc/u8g2_ll_hvline.c ****       do
 108:u8g2/csrc/u8g2_ll_hvline.c ****       {
 109:u8g2/csrc/u8g2_ll_hvline.c **** 	*ptr |= or_mask;
  82              		.loc 1 109 0 discriminator 1
  83 0036 0A78     		ldrb	r2, [r1]	@ zero_extendqisi2
  84 0038 3243     		orrs	r2, r2, r6
  85 003a D2B2     		uxtb	r2, r2
 110:u8g2/csrc/u8g2_ll_hvline.c **** 	*ptr ^= xor_mask;
  86              		.loc 1 110 0 discriminator 1
  87 003c 6A40     		eors	r2, r2, r5
  88 003e 01F8012B 		strb	r2, [r1], #1
  89              	.LVL12:
 111:u8g2/csrc/u8g2_ll_hvline.c **** 	ptr++;
 112:u8g2/csrc/u8g2_ll_hvline.c **** 	len--;
  90              		.loc 1 112 0 discriminator 1
  91 0042 013B     		subs	r3, r3, #1
  92              	.LVL13:
 113:u8g2/csrc/u8g2_ll_hvline.c ****       } while( len != 0 );
  93              		.loc 1 113 0 discriminator 1
  94 0044 13F0FF03 		ands	r3, r3, #255
  95              	.LVL14:
  96 0048 F5D1     		bne	.L5
  97 004a F0BD     		pop	{r4, r5, r6, r7, pc}
  98              	.LVL15:
  99              	.L10:
  93:u8g2/csrc/u8g2_ll_hvline.c ****   if ( u8g2->draw_color != 1 )
 100              		.loc 1 93 0
 101 004c 2E46     		mov	r6, r5
 102 004e E4E7     		b	.L2
 103              	.LVL16:
 104              	.L14:
  91:u8g2/csrc/u8g2_ll_hvline.c ****   if ( u8g2->draw_color <= 1 )
 105              		.loc 1 91 0
 106 0050 0025     		movs	r5, #0
 107              	.LVL17:
 108 0052 E4E7     		b	.L3
 109              	.LVL18:
 110              	.L16:
 114:u8g2/csrc/u8g2_ll_hvline.c ****   }
 115:u8g2/csrc/u8g2_ll_hvline.c ****   else
 116:u8g2/csrc/u8g2_ll_hvline.c ****   {    
ARM GAS  C:\Users\nhantt\AppData\Local\Temp\ccqsIyKt.s 			page 5


 117:u8g2/csrc/u8g2_ll_hvline.c ****     do
 118:u8g2/csrc/u8g2_ll_hvline.c ****     {
 119:u8g2/csrc/u8g2_ll_hvline.c ****       *ptr |= or_mask;
 120:u8g2/csrc/u8g2_ll_hvline.c ****       *ptr ^= xor_mask;
 121:u8g2/csrc/u8g2_ll_hvline.c ****       
 122:u8g2/csrc/u8g2_ll_hvline.c ****       bit_pos++;
 123:u8g2/csrc/u8g2_ll_hvline.c ****       bit_pos &= 7;
 124:u8g2/csrc/u8g2_ll_hvline.c **** 
 125:u8g2/csrc/u8g2_ll_hvline.c ****       len--;
 126:u8g2/csrc/u8g2_ll_hvline.c **** 
 127:u8g2/csrc/u8g2_ll_hvline.c ****       if ( bit_pos == 0 )
 128:u8g2/csrc/u8g2_ll_hvline.c ****       {
 129:u8g2/csrc/u8g2_ll_hvline.c **** 	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 
 130:u8g2/csrc/u8g2_ll_hvline.c **** 		
 131:u8g2/csrc/u8g2_ll_hvline.c **** 	if ( u8g2->draw_color <= 1 )
 132:u8g2/csrc/u8g2_ll_hvline.c **** 	  or_mask  = 1;
 111              		.loc 1 132 0
 112 0054 0126     		movs	r6, #1
 113              	.LVL19:
 114 0056 16E0     		b	.L8
 115              	.LVL20:
 116              	.L7:
 133:u8g2/csrc/u8g2_ll_hvline.c **** 	if ( u8g2->draw_color != 1 )
 134:u8g2/csrc/u8g2_ll_hvline.c **** 	  xor_mask = 1;
 135:u8g2/csrc/u8g2_ll_hvline.c ****       }
 136:u8g2/csrc/u8g2_ll_hvline.c ****       else
 137:u8g2/csrc/u8g2_ll_hvline.c ****       {
 138:u8g2/csrc/u8g2_ll_hvline.c **** 	or_mask <<= 1;
 117              		.loc 1 138 0
 118 0058 7600     		lsls	r6, r6, #1
 119              	.LVL21:
 120 005a F6B2     		uxtb	r6, r6
 121              	.LVL22:
 139:u8g2/csrc/u8g2_ll_hvline.c **** 	xor_mask <<= 1;
 122              		.loc 1 139 0
 123 005c 6D00     		lsls	r5, r5, #1
 124              	.LVL23:
 125 005e EDB2     		uxtb	r5, r5
 126              	.LVL24:
 127              	.L9:
 140:u8g2/csrc/u8g2_ll_hvline.c ****       }
 141:u8g2/csrc/u8g2_ll_hvline.c ****     } while( len != 0 );
 128              		.loc 1 141 0
 129 0060 ABB1     		cbz	r3, .L15
 130              	.L4:
 131              	.LVL25:
 119:u8g2/csrc/u8g2_ll_hvline.c ****       *ptr ^= xor_mask;
 132              		.loc 1 119 0
 133 0062 0A78     		ldrb	r2, [r1]	@ zero_extendqisi2
 134 0064 3243     		orrs	r2, r2, r6
 135 0066 D2B2     		uxtb	r2, r2
 120:u8g2/csrc/u8g2_ll_hvline.c ****       
 136              		.loc 1 120 0
 137 0068 6A40     		eors	r2, r2, r5
 138 006a 0A70     		strb	r2, [r1]
 122:u8g2/csrc/u8g2_ll_hvline.c ****       bit_pos &= 7;
 139              		.loc 1 122 0
ARM GAS  C:\Users\nhantt\AppData\Local\Temp\ccqsIyKt.s 			page 6


 140 006c 621C     		adds	r2, r4, #1
 141              	.LVL26:
 125:u8g2/csrc/u8g2_ll_hvline.c **** 
 142              		.loc 1 125 0
 143 006e 013B     		subs	r3, r3, #1
 144              	.LVL27:
 145 0070 DBB2     		uxtb	r3, r3
 146              	.LVL28:
 127:u8g2/csrc/u8g2_ll_hvline.c ****       {
 147              		.loc 1 127 0
 148 0072 12F00704 		ands	r4, r2, #7
 149 0076 EFD1     		bne	.L7
 129:u8g2/csrc/u8g2_ll_hvline.c **** 		
 150              		.loc 1 129 0
 151 0078 90F83A20 		ldrb	r2, [r0, #58]	@ zero_extendqisi2
 152              	.LVL29:
 153 007c 1144     		add	r1, r1, r2
 154              	.LVL30:
 131:u8g2/csrc/u8g2_ll_hvline.c **** 	  or_mask  = 1;
 155              		.loc 1 131 0
 156 007e 90F87D20 		ldrb	r2, [r0, #125]	@ zero_extendqisi2
 157 0082 012A     		cmp	r2, #1
 158 0084 E6D9     		bls	.L16
 159              	.LVL31:
 160              	.L8:
 133:u8g2/csrc/u8g2_ll_hvline.c **** 	  xor_mask = 1;
 161              		.loc 1 133 0
 162 0086 012A     		cmp	r2, #1
 163 0088 EAD0     		beq	.L9
 134:u8g2/csrc/u8g2_ll_hvline.c ****       }
 164              		.loc 1 134 0
 165 008a 0125     		movs	r5, #1
 166              	.LVL32:
 167 008c E8E7     		b	.L9
 168              	.LVL33:
 169              	.L15:
 170 008e F0BD     		pop	{r4, r5, r6, r7, pc}
 171              		.cfi_endproc
 172              	.LFE0:
 174              		.section	.text.u8g2_ll_hvline_horizontal_right_lsb,"ax",%progbits
 175              		.align	1
 176              		.global	u8g2_ll_hvline_horizontal_right_lsb
 177              		.syntax unified
 178              		.thumb
 179              		.thumb_func
 180              		.fpu softvfp
 182              	u8g2_ll_hvline_horizontal_right_lsb:
 183              	.LFB1:
 142:u8g2/csrc/u8g2_ll_hvline.c ****   }
 143:u8g2/csrc/u8g2_ll_hvline.c **** }
 144:u8g2/csrc/u8g2_ll_hvline.c **** 
 145:u8g2/csrc/u8g2_ll_hvline.c **** 
 146:u8g2/csrc/u8g2_ll_hvline.c **** 
 147:u8g2/csrc/u8g2_ll_hvline.c **** #else /* U8G2_HVLINE_SPEED_OPTIMIZATION */
 148:u8g2/csrc/u8g2_ll_hvline.c **** 
 149:u8g2/csrc/u8g2_ll_hvline.c **** /*
 150:u8g2/csrc/u8g2_ll_hvline.c ****   x,y position within the buffer
ARM GAS  C:\Users\nhantt\AppData\Local\Temp\ccqsIyKt.s 			page 7


 151:u8g2/csrc/u8g2_ll_hvline.c **** */
 152:u8g2/csrc/u8g2_ll_hvline.c **** static void u8g2_draw_pixel_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y)
 153:u8g2/csrc/u8g2_ll_hvline.c **** {
 154:u8g2/csrc/u8g2_ll_hvline.c ****   uint16_t offset;
 155:u8g2/csrc/u8g2_ll_hvline.c ****   uint8_t *ptr;
 156:u8g2/csrc/u8g2_ll_hvline.c ****   uint8_t bit_pos, mask;
 157:u8g2/csrc/u8g2_ll_hvline.c ****   
 158:u8g2/csrc/u8g2_ll_hvline.c ****   //assert(x >= u8g2->buf_x0);
 159:u8g2/csrc/u8g2_ll_hvline.c ****   //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
 160:u8g2/csrc/u8g2_ll_hvline.c ****   //assert(y >= u8g2->buf_y0);
 161:u8g2/csrc/u8g2_ll_hvline.c ****   //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
 162:u8g2/csrc/u8g2_ll_hvline.c ****   
 163:u8g2/csrc/u8g2_ll_hvline.c ****   /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
 164:u8g2/csrc/u8g2_ll_hvline.c ****   bit_pos = y;		/* overflow truncate is ok here... */
 165:u8g2/csrc/u8g2_ll_hvline.c ****   bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 166:u8g2/csrc/u8g2_ll_hvline.c ****   mask = 1;
 167:u8g2/csrc/u8g2_ll_hvline.c ****   mask <<= bit_pos;
 168:u8g2/csrc/u8g2_ll_hvline.c **** 
 169:u8g2/csrc/u8g2_ll_hvline.c ****   offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 170:u8g2/csrc/u8g2_ll_hvline.c ****   offset &= ~7;
 171:u8g2/csrc/u8g2_ll_hvline.c ****   offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 172:u8g2/csrc/u8g2_ll_hvline.c ****   ptr = u8g2->tile_buf_ptr;
 173:u8g2/csrc/u8g2_ll_hvline.c ****   ptr += offset;
 174:u8g2/csrc/u8g2_ll_hvline.c ****   ptr += x;
 175:u8g2/csrc/u8g2_ll_hvline.c **** 
 176:u8g2/csrc/u8g2_ll_hvline.c **** 
 177:u8g2/csrc/u8g2_ll_hvline.c ****   if ( u8g2->draw_color <= 1 )
 178:u8g2/csrc/u8g2_ll_hvline.c ****     *ptr |= mask;
 179:u8g2/csrc/u8g2_ll_hvline.c ****   if ( u8g2->draw_color != 1 )
 180:u8g2/csrc/u8g2_ll_hvline.c ****     *ptr ^= mask;
 181:u8g2/csrc/u8g2_ll_hvline.c **** 
 182:u8g2/csrc/u8g2_ll_hvline.c **** }
 183:u8g2/csrc/u8g2_ll_hvline.c **** 
 184:u8g2/csrc/u8g2_ll_hvline.c **** /*
 185:u8g2/csrc/u8g2_ll_hvline.c ****   x,y		Upper left position of the line within the local buffer (not the display!)
 186:u8g2/csrc/u8g2_ll_hvline.c ****   len		length of the line in pixel, len must not be 0
 187:u8g2/csrc/u8g2_ll_hvline.c ****   dir		0: horizontal line (left to right)
 188:u8g2/csrc/u8g2_ll_hvline.c **** 		1: vertical line (top to bottom)
 189:u8g2/csrc/u8g2_ll_hvline.c ****   asumption: 
 190:u8g2/csrc/u8g2_ll_hvline.c ****     all clipping done
 191:u8g2/csrc/u8g2_ll_hvline.c **** */
 192:u8g2/csrc/u8g2_ll_hvline.c **** void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, u
 193:u8g2/csrc/u8g2_ll_hvline.c **** {
 194:u8g2/csrc/u8g2_ll_hvline.c ****   if ( dir == 0 )
 195:u8g2/csrc/u8g2_ll_hvline.c ****   {
 196:u8g2/csrc/u8g2_ll_hvline.c ****     do
 197:u8g2/csrc/u8g2_ll_hvline.c ****     {
 198:u8g2/csrc/u8g2_ll_hvline.c ****       u8g2_draw_pixel_vertical_top_lsb(u8g2, x, y);
 199:u8g2/csrc/u8g2_ll_hvline.c ****       x++;
 200:u8g2/csrc/u8g2_ll_hvline.c ****       len--;
 201:u8g2/csrc/u8g2_ll_hvline.c ****     } while( len != 0 );
 202:u8g2/csrc/u8g2_ll_hvline.c ****   }
 203:u8g2/csrc/u8g2_ll_hvline.c ****   else
 204:u8g2/csrc/u8g2_ll_hvline.c ****   {
 205:u8g2/csrc/u8g2_ll_hvline.c ****     do
 206:u8g2/csrc/u8g2_ll_hvline.c ****     {
 207:u8g2/csrc/u8g2_ll_hvline.c ****       u8g2_draw_pixel_vertical_top_lsb(u8g2, x, y);
ARM GAS  C:\Users\nhantt\AppData\Local\Temp\ccqsIyKt.s 			page 8


 208:u8g2/csrc/u8g2_ll_hvline.c ****       y++;
 209:u8g2/csrc/u8g2_ll_hvline.c ****       len--;
 210:u8g2/csrc/u8g2_ll_hvline.c ****     } while( len != 0 );
 211:u8g2/csrc/u8g2_ll_hvline.c ****   }
 212:u8g2/csrc/u8g2_ll_hvline.c **** }
 213:u8g2/csrc/u8g2_ll_hvline.c **** 
 214:u8g2/csrc/u8g2_ll_hvline.c **** 
 215:u8g2/csrc/u8g2_ll_hvline.c **** #endif /* U8G2_HVLINE_SPEED_OPTIMIZATION */
 216:u8g2/csrc/u8g2_ll_hvline.c **** 
 217:u8g2/csrc/u8g2_ll_hvline.c **** /*=================================================*/
 218:u8g2/csrc/u8g2_ll_hvline.c **** /*
 219:u8g2/csrc/u8g2_ll_hvline.c ****   u8g2_ll_hvline_horizontal_right_lsb
 220:u8g2/csrc/u8g2_ll_hvline.c ****     ST7920
 221:u8g2/csrc/u8g2_ll_hvline.c **** */
 222:u8g2/csrc/u8g2_ll_hvline.c **** 
 223:u8g2/csrc/u8g2_ll_hvline.c **** #ifdef U8G2_HVLINE_SPEED_OPTIMIZATION
 224:u8g2/csrc/u8g2_ll_hvline.c **** 
 225:u8g2/csrc/u8g2_ll_hvline.c **** /*
 226:u8g2/csrc/u8g2_ll_hvline.c ****   x,y		Upper left position of the line within the local buffer (not the display!)
 227:u8g2/csrc/u8g2_ll_hvline.c ****   len		length of the line in pixel, len must not be 0
 228:u8g2/csrc/u8g2_ll_hvline.c ****   dir		0: horizontal line (left to right)
 229:u8g2/csrc/u8g2_ll_hvline.c **** 		1: vertical line (top to bottom)
 230:u8g2/csrc/u8g2_ll_hvline.c ****   asumption: 
 231:u8g2/csrc/u8g2_ll_hvline.c ****     all clipping done
 232:u8g2/csrc/u8g2_ll_hvline.c **** */
 233:u8g2/csrc/u8g2_ll_hvline.c **** 
 234:u8g2/csrc/u8g2_ll_hvline.c **** void u8g2_ll_hvline_horizontal_right_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t le
 235:u8g2/csrc/u8g2_ll_hvline.c **** {
 184              		.loc 1 235 0
 185              		.cfi_startproc
 186              		@ args = 4, pretend = 0, frame = 0
 187              		@ frame_needed = 0, uses_anonymous_args = 0
 188              		@ link register save eliminated.
 189              	.LVL34:
 190 0000 F0B4     		push	{r4, r5, r6, r7}
 191              	.LCFI1:
 192              		.cfi_def_cfa_offset 16
 193              		.cfi_offset 4, -16
 194              		.cfi_offset 5, -12
 195              		.cfi_offset 6, -8
 196              		.cfi_offset 7, -4
 197 0002 9DF81060 		ldrb	r6, [sp, #16]	@ zero_extendqisi2
 236:u8g2/csrc/u8g2_ll_hvline.c ****   uint16_t offset;
 237:u8g2/csrc/u8g2_ll_hvline.c ****   uint8_t *ptr;
 238:u8g2/csrc/u8g2_ll_hvline.c ****   uint8_t bit_pos;
 239:u8g2/csrc/u8g2_ll_hvline.c ****   uint8_t mask;
 240:u8g2/csrc/u8g2_ll_hvline.c ****   uint8_t tile_width = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 198              		.loc 1 240 0
 199 0006 0468     		ldr	r4, [r0]
 200 0008 257C     		ldrb	r5, [r4, #16]	@ zero_extendqisi2
 201              	.LVL35:
 241:u8g2/csrc/u8g2_ll_hvline.c **** 
 242:u8g2/csrc/u8g2_ll_hvline.c ****   bit_pos = x;		/* overflow truncate is ok here... */
 243:u8g2/csrc/u8g2_ll_hvline.c ****   bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 202              		.loc 1 243 0
 203 000a 01F00707 		and	r7, r1, #7
 204              	.LVL36:
ARM GAS  C:\Users\nhantt\AppData\Local\Temp\ccqsIyKt.s 			page 9


 244:u8g2/csrc/u8g2_ll_hvline.c ****   mask = 128;
 245:u8g2/csrc/u8g2_ll_hvline.c ****   mask >>= bit_pos;
 205              		.loc 1 245 0
 206 000e 8024     		movs	r4, #128
 207 0010 3C41     		asrs	r4, r4, r7
 208 0012 E4B2     		uxtb	r4, r4
 209              	.LVL37:
 246:u8g2/csrc/u8g2_ll_hvline.c **** 
 247:u8g2/csrc/u8g2_ll_hvline.c ****   offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 248:u8g2/csrc/u8g2_ll_hvline.c ****   offset *= tile_width;
 249:u8g2/csrc/u8g2_ll_hvline.c ****   offset += x>>3;
 210              		.loc 1 249 0
 211 0014 C908     		lsrs	r1, r1, #3
 212              	.LVL38:
 213 0016 05FB0211 		mla	r1, r5, r2, r1
 214 001a 89B2     		uxth	r1, r1
 215              	.LVL39:
 250:u8g2/csrc/u8g2_ll_hvline.c ****   ptr = u8g2->tile_buf_ptr;
 216              		.loc 1 250 0
 217 001c 426B     		ldr	r2, [r0, #52]
 218              	.LVL40:
 251:u8g2/csrc/u8g2_ll_hvline.c ****   ptr += offset;
 219              		.loc 1 251 0
 220 001e 0A44     		add	r2, r2, r1
 221              	.LVL41:
 252:u8g2/csrc/u8g2_ll_hvline.c ****   
 253:u8g2/csrc/u8g2_ll_hvline.c ****   if ( dir == 0 )
 222              		.loc 1 253 0
 223 0020 0EBB     		cbnz	r6, .L18
 224 0022 07E0     		b	.L22
 225              	.LVL42:
 226              	.L27:
 254:u8g2/csrc/u8g2_ll_hvline.c ****   {
 255:u8g2/csrc/u8g2_ll_hvline.c ****       
 256:u8g2/csrc/u8g2_ll_hvline.c ****     do
 257:u8g2/csrc/u8g2_ll_hvline.c ****     {
 258:u8g2/csrc/u8g2_ll_hvline.c **** 
 259:u8g2/csrc/u8g2_ll_hvline.c ****       if ( u8g2->draw_color <= 1 )
 260:u8g2/csrc/u8g2_ll_hvline.c **** 	*ptr |= mask;
 227              		.loc 1 260 0
 228 0024 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 229 0026 2143     		orrs	r1, r1, r4
 230 0028 1170     		strb	r1, [r2]
 231 002a 07E0     		b	.L19
 232              	.LVL43:
 233              	.L21:
 261:u8g2/csrc/u8g2_ll_hvline.c ****       if ( u8g2->draw_color != 1 )
 262:u8g2/csrc/u8g2_ll_hvline.c **** 	*ptr ^= mask;
 263:u8g2/csrc/u8g2_ll_hvline.c ****       
 264:u8g2/csrc/u8g2_ll_hvline.c ****       mask >>= 1;
 265:u8g2/csrc/u8g2_ll_hvline.c ****       if ( mask == 0 )
 266:u8g2/csrc/u8g2_ll_hvline.c ****       {
 267:u8g2/csrc/u8g2_ll_hvline.c **** 	mask = 128;
 268:u8g2/csrc/u8g2_ll_hvline.c ****         ptr++;
 269:u8g2/csrc/u8g2_ll_hvline.c ****       }
 270:u8g2/csrc/u8g2_ll_hvline.c ****       
 271:u8g2/csrc/u8g2_ll_hvline.c ****       //x++;
ARM GAS  C:\Users\nhantt\AppData\Local\Temp\ccqsIyKt.s 			page 10


 272:u8g2/csrc/u8g2_ll_hvline.c ****       len--;
 234              		.loc 1 272 0
 235 002c 013B     		subs	r3, r3, #1
 236              	.LVL44:
 273:u8g2/csrc/u8g2_ll_hvline.c ****     } while( len != 0 );
 237              		.loc 1 273 0
 238 002e 13F0FF03 		ands	r3, r3, #255
 239              	.LVL45:
 240 0032 24D0     		beq	.L17
 241              	.L22:
 242              	.LVL46:
 259:u8g2/csrc/u8g2_ll_hvline.c **** 	*ptr |= mask;
 243              		.loc 1 259 0
 244 0034 90F87D10 		ldrb	r1, [r0, #125]	@ zero_extendqisi2
 245 0038 0129     		cmp	r1, #1
 246 003a F3D9     		bls	.L27
 247              	.L19:
 261:u8g2/csrc/u8g2_ll_hvline.c ****       if ( u8g2->draw_color != 1 )
 248              		.loc 1 261 0
 249 003c 90F87D10 		ldrb	r1, [r0, #125]	@ zero_extendqisi2
 250 0040 0129     		cmp	r1, #1
 251 0042 02D0     		beq	.L20
 262:u8g2/csrc/u8g2_ll_hvline.c ****       
 252              		.loc 1 262 0
 253 0044 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 254 0046 6140     		eors	r1, r1, r4
 255 0048 1170     		strb	r1, [r2]
 256              	.L20:
 257              	.LVL47:
 265:u8g2/csrc/u8g2_ll_hvline.c ****       {
 258              		.loc 1 265 0
 259 004a 6408     		lsrs	r4, r4, #1
 260              	.LVL48:
 261 004c EED1     		bne	.L21
 262              	.LVL49:
 268:u8g2/csrc/u8g2_ll_hvline.c ****       }
 263              		.loc 1 268 0
 264 004e 0132     		adds	r2, r2, #1
 265              	.LVL50:
 267:u8g2/csrc/u8g2_ll_hvline.c ****         ptr++;
 266              		.loc 1 267 0
 267 0050 8024     		movs	r4, #128
 268 0052 EBE7     		b	.L21
 269              	.LVL51:
 270              	.L28:
 274:u8g2/csrc/u8g2_ll_hvline.c ****   }
 275:u8g2/csrc/u8g2_ll_hvline.c ****   else
 276:u8g2/csrc/u8g2_ll_hvline.c ****   {
 277:u8g2/csrc/u8g2_ll_hvline.c ****     do
 278:u8g2/csrc/u8g2_ll_hvline.c ****     {
 279:u8g2/csrc/u8g2_ll_hvline.c ****       if ( u8g2->draw_color <= 1 )
 280:u8g2/csrc/u8g2_ll_hvline.c **** 	*ptr |= mask;
 271              		.loc 1 280 0
 272 0054 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 273 0056 2143     		orrs	r1, r1, r4
 274 0058 1170     		strb	r1, [r2]
 275 005a 08E0     		b	.L24
ARM GAS  C:\Users\nhantt\AppData\Local\Temp\ccqsIyKt.s 			page 11


 276              	.L25:
 281:u8g2/csrc/u8g2_ll_hvline.c ****       if ( u8g2->draw_color != 1 )
 282:u8g2/csrc/u8g2_ll_hvline.c **** 	*ptr ^= mask;
 283:u8g2/csrc/u8g2_ll_hvline.c ****       
 284:u8g2/csrc/u8g2_ll_hvline.c ****       ptr += tile_width;
 277              		.loc 1 284 0
 278 005c 2A44     		add	r2, r2, r5
 279              	.LVL52:
 285:u8g2/csrc/u8g2_ll_hvline.c ****       //y++;
 286:u8g2/csrc/u8g2_ll_hvline.c ****       len--;
 280              		.loc 1 286 0
 281 005e 013B     		subs	r3, r3, #1
 282              	.LVL53:
 287:u8g2/csrc/u8g2_ll_hvline.c ****     } while( len != 0 );
 283              		.loc 1 287 0
 284 0060 13F0FF03 		ands	r3, r3, #255
 285              	.LVL54:
 286 0064 0BD0     		beq	.L17
 287              	.L18:
 288              	.LVL55:
 279:u8g2/csrc/u8g2_ll_hvline.c **** 	*ptr |= mask;
 289              		.loc 1 279 0
 290 0066 90F87D10 		ldrb	r1, [r0, #125]	@ zero_extendqisi2
 291 006a 0129     		cmp	r1, #1
 292 006c F2D9     		bls	.L28
 293              	.L24:
 281:u8g2/csrc/u8g2_ll_hvline.c **** 	*ptr ^= mask;
 294              		.loc 1 281 0
 295 006e 90F87D10 		ldrb	r1, [r0, #125]	@ zero_extendqisi2
 296 0072 0129     		cmp	r1, #1
 297 0074 F2D0     		beq	.L25
 282:u8g2/csrc/u8g2_ll_hvline.c ****       
 298              		.loc 1 282 0
 299 0076 1178     		ldrb	r1, [r2]	@ zero_extendqisi2
 300 0078 6140     		eors	r1, r1, r4
 301 007a 1170     		strb	r1, [r2]
 302 007c EEE7     		b	.L25
 303              	.LVL56:
 304              	.L17:
 288:u8g2/csrc/u8g2_ll_hvline.c ****   }
 289:u8g2/csrc/u8g2_ll_hvline.c **** }
 305              		.loc 1 289 0
 306 007e F0BC     		pop	{r4, r5, r6, r7}
 307              	.LCFI2:
 308              		.cfi_restore 7
 309              		.cfi_restore 6
 310              		.cfi_restore 5
 311              		.cfi_restore 4
 312              		.cfi_def_cfa_offset 0
 313              	.LVL57:
 314 0080 7047     		bx	lr
 315              		.cfi_endproc
 316              	.LFE1:
 318              		.text
 319              	.Letext0:
 320              		.file 2 "c:\\program files (x86)\\gnu tools arm embedded\\6.2 2016q4\\arm-none-eabi\\include\\mach
 321              		.file 3 "c:\\program files (x86)\\gnu tools arm embedded\\6.2 2016q4\\arm-none-eabi\\include\\sys\
ARM GAS  C:\Users\nhantt\AppData\Local\Temp\ccqsIyKt.s 			page 12


 322              		.file 4 "u8g2/csrc/u8x8.h"
 323              		.file 5 "u8g2/csrc/u8g2.h"
ARM GAS  C:\Users\nhantt\AppData\Local\Temp\ccqsIyKt.s 			page 13


DEFINED SYMBOLS
                            *ABS*:00000000 u8g2_ll_hvline.c
C:\Users\nhantt\AppData\Local\Temp\ccqsIyKt.s:16     .text.u8g2_ll_hvline_vertical_top_lsb:00000000 $t
C:\Users\nhantt\AppData\Local\Temp\ccqsIyKt.s:23     .text.u8g2_ll_hvline_vertical_top_lsb:00000000 u8g2_ll_hvline_vertical_top_lsb
C:\Users\nhantt\AppData\Local\Temp\ccqsIyKt.s:175    .text.u8g2_ll_hvline_horizontal_right_lsb:00000000 $t
C:\Users\nhantt\AppData\Local\Temp\ccqsIyKt.s:182    .text.u8g2_ll_hvline_horizontal_right_lsb:00000000 u8g2_ll_hvline_horizontal_right_lsb
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
