ARM GAS  C:\Users\nhantt\AppData\Local\Temp\ccgQ0vsv.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"u8x8_d_st7920.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.u8x8_d_st7920_common,"ax",%progbits
  16              		.align	1
  17              		.global	u8x8_d_st7920_common
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	u8x8_d_st7920_common:
  24              	.LFB0:
  25              		.file 1 "u8g2/csrc/u8x8_d_st7920.c"
   1:u8g2/csrc/u8x8_d_st7920.c **** /*
   2:u8g2/csrc/u8x8_d_st7920.c **** 
   3:u8g2/csrc/u8x8_d_st7920.c ****   u8x8_d_st7920.c
   4:u8g2/csrc/u8x8_d_st7920.c ****   
   5:u8g2/csrc/u8x8_d_st7920.c ****   Universal 8bit Graphics Library (https://github.com/olikraus/u8g2/)
   6:u8g2/csrc/u8x8_d_st7920.c **** 
   7:u8g2/csrc/u8x8_d_st7920.c ****   Copyright (c) 2016, olikraus@gmail.com
   8:u8g2/csrc/u8x8_d_st7920.c ****   All rights reserved.
   9:u8g2/csrc/u8x8_d_st7920.c **** 
  10:u8g2/csrc/u8x8_d_st7920.c ****   Redistribution and use in source and binary forms, with or without modification, 
  11:u8g2/csrc/u8x8_d_st7920.c ****   are permitted provided that the following conditions are met:
  12:u8g2/csrc/u8x8_d_st7920.c **** 
  13:u8g2/csrc/u8x8_d_st7920.c ****   * Redistributions of source code must retain the above copyright notice, this list 
  14:u8g2/csrc/u8x8_d_st7920.c ****     of conditions and the following disclaimer.
  15:u8g2/csrc/u8x8_d_st7920.c ****     
  16:u8g2/csrc/u8x8_d_st7920.c ****   * Redistributions in binary form must reproduce the above copyright notice, this 
  17:u8g2/csrc/u8x8_d_st7920.c ****     list of conditions and the following disclaimer in the documentation and/or other 
  18:u8g2/csrc/u8x8_d_st7920.c ****     materials provided with the distribution.
  19:u8g2/csrc/u8x8_d_st7920.c **** 
  20:u8g2/csrc/u8x8_d_st7920.c ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND 
  21:u8g2/csrc/u8x8_d_st7920.c ****   CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, 
  22:u8g2/csrc/u8x8_d_st7920.c ****   INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF 
  23:u8g2/csrc/u8x8_d_st7920.c ****   MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
  24:u8g2/csrc/u8x8_d_st7920.c ****   DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR 
  25:u8g2/csrc/u8x8_d_st7920.c ****   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
  26:u8g2/csrc/u8x8_d_st7920.c ****   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  27:u8g2/csrc/u8x8_d_st7920.c ****   NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
  28:u8g2/csrc/u8x8_d_st7920.c ****   LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
  29:u8g2/csrc/u8x8_d_st7920.c ****   CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
  30:u8g2/csrc/u8x8_d_st7920.c ****   STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  31:u8g2/csrc/u8x8_d_st7920.c ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF 
  32:u8g2/csrc/u8x8_d_st7920.c ****   ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  
  33:u8g2/csrc/u8x8_d_st7920.c **** 
ARM GAS  C:\Users\nhantt\AppData\Local\Temp\ccgQ0vsv.s 			page 2


  34:u8g2/csrc/u8x8_d_st7920.c **** 
  35:u8g2/csrc/u8x8_d_st7920.c ****   The ST7920 controller does not support hardware graphics flip.
  36:u8g2/csrc/u8x8_d_st7920.c ****   Contrast adjustment is done by an external resistor --> no support for contrast adjustment
  37:u8g2/csrc/u8x8_d_st7920.c ****   
  38:u8g2/csrc/u8x8_d_st7920.c ****   
  39:u8g2/csrc/u8x8_d_st7920.c **** */
  40:u8g2/csrc/u8x8_d_st7920.c **** #include "u8x8.h"
  41:u8g2/csrc/u8x8_d_st7920.c **** 
  42:u8g2/csrc/u8x8_d_st7920.c **** 
  43:u8g2/csrc/u8x8_d_st7920.c **** 
  44:u8g2/csrc/u8x8_d_st7920.c **** static const uint8_t u8x8_d_st7920_init_seq[] = {
  45:u8g2/csrc/u8x8_d_st7920.c ****     
  46:u8g2/csrc/u8x8_d_st7920.c ****   U8X8_DLY(100),
  47:u8g2/csrc/u8x8_d_st7920.c ****   U8X8_START_TRANSFER(),             	/* enable chip, delay is part of the transfer start */
  48:u8g2/csrc/u8x8_d_st7920.c ****   U8X8_DLY(10),
  49:u8g2/csrc/u8x8_d_st7920.c ****   
  50:u8g2/csrc/u8x8_d_st7920.c ****   U8X8_C(0x038),            			/* 8 Bit interface (DL=1), basic instruction set (RE=0) */
  51:u8g2/csrc/u8x8_d_st7920.c ****   U8X8_C(0x008),		                /* display on, cursor & blink off; 0x08: all off */
  52:u8g2/csrc/u8x8_d_st7920.c ****   U8X8_C(0x006),		                /* Entry mode: Cursor move to right ,DDRAM address counter (AC) p
  53:u8g2/csrc/u8x8_d_st7920.c ****   U8X8_C(0x002),		                /* disable scroll, enable CGRAM adress  */
  54:u8g2/csrc/u8x8_d_st7920.c ****   U8X8_C(0x001),		                /* clear RAM, needs 1.6 ms */
  55:u8g2/csrc/u8x8_d_st7920.c ****   U8X8_DLY(4),					/* delay 2ms */
  56:u8g2/csrc/u8x8_d_st7920.c **** 
  57:u8g2/csrc/u8x8_d_st7920.c ****   
  58:u8g2/csrc/u8x8_d_st7920.c ****   U8X8_END_TRANSFER(),             	/* disable chip */
  59:u8g2/csrc/u8x8_d_st7920.c ****   U8X8_END()             			/* end of sequence */
  60:u8g2/csrc/u8x8_d_st7920.c **** };
  61:u8g2/csrc/u8x8_d_st7920.c **** 
  62:u8g2/csrc/u8x8_d_st7920.c **** static const uint8_t u8x8_d_st7920_powersave0_seq[] = {
  63:u8g2/csrc/u8x8_d_st7920.c ****   U8X8_START_TRANSFER(),             	/* enable chip, delay is part of the transfer start */
  64:u8g2/csrc/u8x8_d_st7920.c ****   U8X8_C(0x038),            			/* 8 Bit interface (DL=1), basic instruction set (RE=0) */
  65:u8g2/csrc/u8x8_d_st7920.c ****   U8X8_C(0x00c),		                /* display on, cursor & blink off */
  66:u8g2/csrc/u8x8_d_st7920.c ****   U8X8_END_TRANSFER(),             	/* disable chip */
  67:u8g2/csrc/u8x8_d_st7920.c ****   U8X8_END()             			/* end of sequence */
  68:u8g2/csrc/u8x8_d_st7920.c **** };
  69:u8g2/csrc/u8x8_d_st7920.c **** 
  70:u8g2/csrc/u8x8_d_st7920.c **** static const uint8_t u8x8_d_st7920_powersave1_seq[] = {
  71:u8g2/csrc/u8x8_d_st7920.c ****   U8X8_START_TRANSFER(),             	/* enable chip, delay is part of the transfer start */
  72:u8g2/csrc/u8x8_d_st7920.c ****   U8X8_C(0x038),            			/* 8 Bit interface (DL=1), basic instruction set (RE=0) */
  73:u8g2/csrc/u8x8_d_st7920.c ****   U8X8_C(0x008),		                /* display off */
  74:u8g2/csrc/u8x8_d_st7920.c ****   U8X8_END_TRANSFER(),             	/* disable chip */
  75:u8g2/csrc/u8x8_d_st7920.c ****   U8X8_END()             			/* end of sequence */
  76:u8g2/csrc/u8x8_d_st7920.c **** };
  77:u8g2/csrc/u8x8_d_st7920.c **** 
  78:u8g2/csrc/u8x8_d_st7920.c **** 
  79:u8g2/csrc/u8x8_d_st7920.c **** uint8_t u8x8_d_st7920_common(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
  80:u8g2/csrc/u8x8_d_st7920.c **** {
  26              		.loc 1 80 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              	.LVL0:
  31 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 32
  34              		.cfi_offset 4, -32
  35              		.cfi_offset 5, -28
ARM GAS  C:\Users\nhantt\AppData\Local\Temp\ccgQ0vsv.s 			page 3


  36              		.cfi_offset 6, -24
  37              		.cfi_offset 7, -20
  38              		.cfi_offset 8, -16
  39              		.cfi_offset 9, -12
  40              		.cfi_offset 10, -8
  41              		.cfi_offset 14, -4
  42 0004 0546     		mov	r5, r0
  81:u8g2/csrc/u8x8_d_st7920.c ****   uint8_t x, y, c, i;
  82:u8g2/csrc/u8x8_d_st7920.c ****   uint8_t *ptr;
  83:u8g2/csrc/u8x8_d_st7920.c ****   switch(msg)
  43              		.loc 1 83 0
  44 0006 0B29     		cmp	r1, #11
  45 0008 10D0     		beq	.L3
  46 000a 9846     		mov	r8, r3
  47 000c 0F29     		cmp	r1, #15
  48 000e 1AD0     		beq	.L4
  49 0010 0A29     		cmp	r1, #10
  50 0012 02D0     		beq	.L13
  84:u8g2/csrc/u8x8_d_st7920.c ****   {
  85:u8g2/csrc/u8x8_d_st7920.c ****     /* U8X8_MSG_DISPLAY_SETUP_MEMORY is handled by the calling function */
  86:u8g2/csrc/u8x8_d_st7920.c ****     /*
  87:u8g2/csrc/u8x8_d_st7920.c ****     case U8X8_MSG_DISPLAY_SETUP_MEMORY:
  88:u8g2/csrc/u8x8_d_st7920.c ****       break;
  89:u8g2/csrc/u8x8_d_st7920.c ****     */
  90:u8g2/csrc/u8x8_d_st7920.c ****     case U8X8_MSG_DISPLAY_INIT:
  91:u8g2/csrc/u8x8_d_st7920.c ****       u8x8_d_helper_display_init(u8x8);
  92:u8g2/csrc/u8x8_d_st7920.c ****       u8x8_cad_SendSequence(u8x8, u8x8_d_st7920_init_seq);
  93:u8g2/csrc/u8x8_d_st7920.c ****       break;
  94:u8g2/csrc/u8x8_d_st7920.c ****     case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
  95:u8g2/csrc/u8x8_d_st7920.c ****       if ( arg_int == 0 )
  96:u8g2/csrc/u8x8_d_st7920.c **** 	u8x8_cad_SendSequence(u8x8, u8x8_d_st7920_powersave0_seq);
  97:u8g2/csrc/u8x8_d_st7920.c ****       else
  98:u8g2/csrc/u8x8_d_st7920.c **** 	u8x8_cad_SendSequence(u8x8, u8x8_d_st7920_powersave1_seq);
  99:u8g2/csrc/u8x8_d_st7920.c ****       break;
 100:u8g2/csrc/u8x8_d_st7920.c ****     case U8X8_MSG_DISPLAY_DRAW_TILE:
 101:u8g2/csrc/u8x8_d_st7920.c ****       y = (((u8x8_tile_t *)arg_ptr)->y_pos);
 102:u8g2/csrc/u8x8_d_st7920.c ****       y*=8;
 103:u8g2/csrc/u8x8_d_st7920.c ****       x = ((u8x8_tile_t *)arg_ptr)->x_pos;
 104:u8g2/csrc/u8x8_d_st7920.c ****       x /= 2;		/* not sure whether this is a clever idea, problem is, the ST7920 can address only e
 105:u8g2/csrc/u8x8_d_st7920.c ****     
 106:u8g2/csrc/u8x8_d_st7920.c ****       if ( y >= 32 )	/* this is the adjustment for 128x64 displays */
 107:u8g2/csrc/u8x8_d_st7920.c ****       {
 108:u8g2/csrc/u8x8_d_st7920.c **** 	y-=32;
 109:u8g2/csrc/u8x8_d_st7920.c **** 	x+=8;
 110:u8g2/csrc/u8x8_d_st7920.c ****       }
 111:u8g2/csrc/u8x8_d_st7920.c ****     
 112:u8g2/csrc/u8x8_d_st7920.c ****       u8x8_cad_StartTransfer(u8x8);
 113:u8g2/csrc/u8x8_d_st7920.c ****         
 114:u8g2/csrc/u8x8_d_st7920.c **** 
 115:u8g2/csrc/u8x8_d_st7920.c ****       /* 
 116:u8g2/csrc/u8x8_d_st7920.c **** 	Tile structure is reused here for the ST7920, however u8x8 is not supported 
 117:u8g2/csrc/u8x8_d_st7920.c **** 	tile_ptr points to data which has cnt*8 bytes (same as SSD1306 tiles)
 118:u8g2/csrc/u8x8_d_st7920.c **** 	Buffer is expected to have 8 lines of code fitting to the ST7920 internal memory
 119:u8g2/csrc/u8x8_d_st7920.c **** 	"cnt" includes the number of horizontal bytes. width is equal to cnt*8
 120:u8g2/csrc/u8x8_d_st7920.c **** 	Also important: Width must be a multiple of 16 (ST7920 requirement), so cnt must be even.
 121:u8g2/csrc/u8x8_d_st7920.c **** 	
 122:u8g2/csrc/u8x8_d_st7920.c **** 	TODO: Consider arg_int, however arg_int is not used by u8g2
ARM GAS  C:\Users\nhantt\AppData\Local\Temp\ccgQ0vsv.s 			page 4


 123:u8g2/csrc/u8x8_d_st7920.c ****       */
 124:u8g2/csrc/u8x8_d_st7920.c ****       c = ((u8x8_tile_t *)arg_ptr)->cnt;	/* number of tiles */
 125:u8g2/csrc/u8x8_d_st7920.c ****       ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;	/* data ptr to the tiles */
 126:u8g2/csrc/u8x8_d_st7920.c ****       /* The following byte is sent to allow the ST7920 to sync up with the data */
 127:u8g2/csrc/u8x8_d_st7920.c ****       /* it solves some issues with garbage data */
 128:u8g2/csrc/u8x8_d_st7920.c ****       u8x8_cad_SendCmd(u8x8, 0x03e );	/* enable extended mode */
 129:u8g2/csrc/u8x8_d_st7920.c ****       for( i = 0; i < 8; i++ )
 130:u8g2/csrc/u8x8_d_st7920.c ****       {
 131:u8g2/csrc/u8x8_d_st7920.c **** 	//u8x8_cad_SendCmd(u8x8, 0x03e );	/* enable extended mode */
 132:u8g2/csrc/u8x8_d_st7920.c **** 	u8x8_cad_SendCmd(u8x8, 0x080 | (y+i) );      /* y pos  */
 133:u8g2/csrc/u8x8_d_st7920.c **** 	u8x8_cad_SendCmd(u8x8, 0x080 | x );      /* set x pos */
 134:u8g2/csrc/u8x8_d_st7920.c **** 	c = ((u8x8_tile_t *)arg_ptr)->cnt;	/* number of tiles */
 135:u8g2/csrc/u8x8_d_st7920.c **** 
 136:u8g2/csrc/u8x8_d_st7920.c **** 	//u8x8->gpio_and_delay_cb(u8x8, U8X8_MSG_DELAY_NANO, 200, NULL);	/* extra dely required */
 137:u8g2/csrc/u8x8_d_st7920.c **** 	u8x8_cad_SendData(u8x8, c, ptr);	/* note: SendData can not handle more than 255 bytes, send one li
 138:u8g2/csrc/u8x8_d_st7920.c **** 	ptr += c;
 139:u8g2/csrc/u8x8_d_st7920.c **** 	//u8x8->gpio_and_delay_cb(u8x8, U8X8_MSG_DELAY_NANO, 200, NULL);	/* extra dely required */
 140:u8g2/csrc/u8x8_d_st7920.c ****       }
 141:u8g2/csrc/u8x8_d_st7920.c **** 
 142:u8g2/csrc/u8x8_d_st7920.c ****       u8x8_cad_EndTransfer(u8x8);
 143:u8g2/csrc/u8x8_d_st7920.c **** 
 144:u8g2/csrc/u8x8_d_st7920.c ****       break;
 145:u8g2/csrc/u8x8_d_st7920.c ****     default:
 146:u8g2/csrc/u8x8_d_st7920.c ****       return 0;
  51              		.loc 1 146 0
  52 0014 0020     		movs	r0, #0
  53              	.LVL1:
 147:u8g2/csrc/u8x8_d_st7920.c ****   }
 148:u8g2/csrc/u8x8_d_st7920.c ****   return 1;
 149:u8g2/csrc/u8x8_d_st7920.c **** }
  54              		.loc 1 149 0
  55 0016 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
  56              	.LVL2:
  57              	.L13:
  91:u8g2/csrc/u8x8_d_st7920.c ****       u8x8_cad_SendSequence(u8x8, u8x8_d_st7920_init_seq);
  58              		.loc 1 91 0
  59 001a FFF7FEFF 		bl	u8x8_d_helper_display_init
  60              	.LVL3:
  92:u8g2/csrc/u8x8_d_st7920.c ****       break;
  61              		.loc 1 92 0
  62 001e 2649     		ldr	r1, .L14
  63 0020 2846     		mov	r0, r5
  64 0022 FFF7FEFF 		bl	u8x8_cad_SendSequence
  65              	.LVL4:
 148:u8g2/csrc/u8x8_d_st7920.c **** }
  66              		.loc 1 148 0
  67 0026 0120     		movs	r0, #1
  93:u8g2/csrc/u8x8_d_st7920.c ****     case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
  68              		.loc 1 93 0
  69 0028 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
  70              	.LVL5:
  71              	.L3:
  95:u8g2/csrc/u8x8_d_st7920.c **** 	u8x8_cad_SendSequence(u8x8, u8x8_d_st7920_powersave0_seq);
  72              		.loc 1 95 0
  73 002c 2AB9     		cbnz	r2, .L6
  96:u8g2/csrc/u8x8_d_st7920.c ****       else
  74              		.loc 1 96 0
ARM GAS  C:\Users\nhantt\AppData\Local\Temp\ccgQ0vsv.s 			page 5


  75 002e 2349     		ldr	r1, .L14+4
  76              	.LVL6:
  77 0030 FFF7FEFF 		bl	u8x8_cad_SendSequence
  78              	.LVL7:
 148:u8g2/csrc/u8x8_d_st7920.c **** }
  79              		.loc 1 148 0
  80 0034 0120     		movs	r0, #1
  81 0036 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
  82              	.LVL8:
  83              	.L6:
  98:u8g2/csrc/u8x8_d_st7920.c ****       break;
  84              		.loc 1 98 0
  85 003a 2149     		ldr	r1, .L14+8
  86              	.LVL9:
  87 003c FFF7FEFF 		bl	u8x8_cad_SendSequence
  88              	.LVL10:
 148:u8g2/csrc/u8x8_d_st7920.c **** }
  89              		.loc 1 148 0
  90 0040 0120     		movs	r0, #1
  91 0042 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
  92              	.LVL11:
  93              	.L4:
 101:u8g2/csrc/u8x8_d_st7920.c ****       y*=8;
  94              		.loc 1 101 0
  95 0046 9F79     		ldrb	r7, [r3, #6]	@ zero_extendqisi2
  96              	.LVL12:
 102:u8g2/csrc/u8x8_d_st7920.c ****       x = ((u8x8_tile_t *)arg_ptr)->x_pos;
  97              		.loc 1 102 0
  98 0048 FF00     		lsls	r7, r7, #3
  99              	.LVL13:
 100 004a FFB2     		uxtb	r7, r7
 101              	.LVL14:
 103:u8g2/csrc/u8x8_d_st7920.c ****       x /= 2;		/* not sure whether this is a clever idea, problem is, the ST7920 can address only e
 102              		.loc 1 103 0
 103 004c 93F80590 		ldrb	r9, [r3, #5]	@ zero_extendqisi2
 104              	.LVL15:
 104:u8g2/csrc/u8x8_d_st7920.c ****     
 105              		.loc 1 104 0
 106 0050 4FEA5909 		lsr	r9, r9, #1
 107              	.LVL16:
 106:u8g2/csrc/u8x8_d_st7920.c ****       {
 108              		.loc 1 106 0
 109 0054 1F2F     		cmp	r7, #31
 110 0056 03D9     		bls	.L7
 108:u8g2/csrc/u8x8_d_st7920.c **** 	x+=8;
 111              		.loc 1 108 0
 112 0058 203F     		subs	r7, r7, #32
 113              	.LVL17:
 114 005a FFB2     		uxtb	r7, r7
 115              	.LVL18:
 109:u8g2/csrc/u8x8_d_st7920.c ****       }
 116              		.loc 1 109 0
 117 005c 09F10809 		add	r9, r9, #8
 118              	.LVL19:
 119              	.L7:
 112:u8g2/csrc/u8x8_d_st7920.c ****         
 120              		.loc 1 112 0
ARM GAS  C:\Users\nhantt\AppData\Local\Temp\ccgQ0vsv.s 			page 6


 121 0060 2846     		mov	r0, r5
 122              	.LVL20:
 123 0062 FFF7FEFF 		bl	u8x8_cad_StartTransfer
 124              	.LVL21:
 125:u8g2/csrc/u8x8_d_st7920.c ****       /* The following byte is sent to allow the ST7920 to sync up with the data */
 125              		.loc 1 125 0
 126 0066 D8F80060 		ldr	r6, [r8]
 127              	.LVL22:
 128:u8g2/csrc/u8x8_d_st7920.c ****       for( i = 0; i < 8; i++ )
 128              		.loc 1 128 0
 129 006a 3E21     		movs	r1, #62
 130 006c 2846     		mov	r0, r5
 131 006e FFF7FEFF 		bl	u8x8_cad_SendCmd
 132              	.LVL23:
 129:u8g2/csrc/u8x8_d_st7920.c ****       {
 133              		.loc 1 129 0
 134 0072 0024     		movs	r4, #0
 135 0074 17E0     		b	.L8
 136              	.LVL24:
 137              	.L9:
 132:u8g2/csrc/u8x8_d_st7920.c **** 	u8x8_cad_SendCmd(u8x8, 0x080 | x );      /* set x pos */
 138              		.loc 1 132 0 discriminator 3
 139 0076 3919     		adds	r1, r7, r4
 140 0078 49B2     		sxtb	r1, r1
 141 007a 61F07F01 		orn	r1, r1, #127
 142 007e C9B2     		uxtb	r1, r1
 143 0080 2846     		mov	r0, r5
 144 0082 FFF7FEFF 		bl	u8x8_cad_SendCmd
 145              	.LVL25:
 133:u8g2/csrc/u8x8_d_st7920.c **** 	c = ((u8x8_tile_t *)arg_ptr)->cnt;	/* number of tiles */
 146              		.loc 1 133 0 discriminator 3
 147 0086 69F07F01 		orn	r1, r9, #127
 148 008a C9B2     		uxtb	r1, r1
 149 008c 2846     		mov	r0, r5
 150 008e FFF7FEFF 		bl	u8x8_cad_SendCmd
 151              	.LVL26:
 134:u8g2/csrc/u8x8_d_st7920.c **** 
 152              		.loc 1 134 0 discriminator 3
 153 0092 98F804A0 		ldrb	r10, [r8, #4]	@ zero_extendqisi2
 154              	.LVL27:
 137:u8g2/csrc/u8x8_d_st7920.c **** 	ptr += c;
 155              		.loc 1 137 0 discriminator 3
 156 0096 3246     		mov	r2, r6
 157 0098 5146     		mov	r1, r10
 158 009a 2846     		mov	r0, r5
 159 009c FFF7FEFF 		bl	u8x8_cad_SendData
 160              	.LVL28:
 138:u8g2/csrc/u8x8_d_st7920.c **** 	//u8x8->gpio_and_delay_cb(u8x8, U8X8_MSG_DELAY_NANO, 200, NULL);	/* extra dely required */
 161              		.loc 1 138 0 discriminator 3
 162 00a0 5644     		add	r6, r6, r10
 163              	.LVL29:
 129:u8g2/csrc/u8x8_d_st7920.c ****       {
 164              		.loc 1 129 0 discriminator 3
 165 00a2 0134     		adds	r4, r4, #1
 166              	.LVL30:
 167 00a4 E4B2     		uxtb	r4, r4
 168              	.LVL31:
ARM GAS  C:\Users\nhantt\AppData\Local\Temp\ccgQ0vsv.s 			page 7


 169              	.L8:
 129:u8g2/csrc/u8x8_d_st7920.c ****       {
 170              		.loc 1 129 0 is_stmt 0 discriminator 1
 171 00a6 072C     		cmp	r4, #7
 172 00a8 E5D9     		bls	.L9
 142:u8g2/csrc/u8x8_d_st7920.c **** 
 173              		.loc 1 142 0 is_stmt 1
 174 00aa 2846     		mov	r0, r5
 175 00ac FFF7FEFF 		bl	u8x8_cad_EndTransfer
 176              	.LVL32:
 148:u8g2/csrc/u8x8_d_st7920.c **** }
 177              		.loc 1 148 0
 178 00b0 0120     		movs	r0, #1
 144:u8g2/csrc/u8x8_d_st7920.c ****     default:
 179              		.loc 1 144 0
 180 00b2 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 181              	.LVL33:
 182              	.L15:
 183 00b6 00BF     		.align	2
 184              	.L14:
 185 00b8 00000000 		.word	.LANCHOR0
 186 00bc 00000000 		.word	.LANCHOR1
 187 00c0 00000000 		.word	.LANCHOR2
 188              		.cfi_endproc
 189              	.LFE0:
 191              		.section	.text.u8x8_d_st7920_192x32,"ax",%progbits
 192              		.align	1
 193              		.global	u8x8_d_st7920_192x32
 194              		.syntax unified
 195              		.thumb
 196              		.thumb_func
 197              		.fpu softvfp
 199              	u8x8_d_st7920_192x32:
 200              	.LFB1:
 150:u8g2/csrc/u8x8_d_st7920.c **** 
 151:u8g2/csrc/u8x8_d_st7920.c **** static const u8x8_display_info_t u8x8_st7920_192x32_display_info =
 152:u8g2/csrc/u8x8_d_st7920.c **** {
 153:u8g2/csrc/u8x8_d_st7920.c ****   /* chip_enable_level = */ 1,
 154:u8g2/csrc/u8x8_d_st7920.c ****   /* chip_disable_level = */ 0,
 155:u8g2/csrc/u8x8_d_st7920.c ****   
 156:u8g2/csrc/u8x8_d_st7920.c ****   /* post_chip_enable_wait_ns = */ 5,
 157:u8g2/csrc/u8x8_d_st7920.c ****   /* pre_chip_disable_wait_ns = */ 5,
 158:u8g2/csrc/u8x8_d_st7920.c ****   /* reset_pulse_width_ms = */ 1, 
 159:u8g2/csrc/u8x8_d_st7920.c ****   /* post_reset_wait_ms = */ 6, 
 160:u8g2/csrc/u8x8_d_st7920.c ****   /* sda_setup_time_ns = */ 20,		
 161:u8g2/csrc/u8x8_d_st7920.c ****   /* sck_pulse_width_ns = */  140,	/* datasheet ST7920 */
 162:u8g2/csrc/u8x8_d_st7920.c ****   /* sck_clock_hz = */ 1000000UL,	/* since Arduino 1.6.0, the SPI bus speed in Hz. Should be  10000
 163:u8g2/csrc/u8x8_d_st7920.c ****   /* spi_mode = */ 3,		/* old: sck_takeover_edge, new: active high (bit 1), rising edge (bit 0), 18
 164:u8g2/csrc/u8x8_d_st7920.c **** 	/* Arduino mode 3: aktive low clock, but use rising edge */
 165:u8g2/csrc/u8x8_d_st7920.c ****   /* i2c_bus_clock_100kHz = */ 4,
 166:u8g2/csrc/u8x8_d_st7920.c ****   /* data_setup_time_ns = */ 30,
 167:u8g2/csrc/u8x8_d_st7920.c ****   /* write_pulse_width_ns = */ 40,
 168:u8g2/csrc/u8x8_d_st7920.c ****   /* tile_width = */ 24,
 169:u8g2/csrc/u8x8_d_st7920.c ****   /* tile_hight = */ 4,
 170:u8g2/csrc/u8x8_d_st7920.c ****   /* default_x_offset = */ 0,
 171:u8g2/csrc/u8x8_d_st7920.c ****   /* flipmode_x_offset = */ 0,
 172:u8g2/csrc/u8x8_d_st7920.c ****   /* pixel_width = */ 192,
ARM GAS  C:\Users\nhantt\AppData\Local\Temp\ccgQ0vsv.s 			page 8


 173:u8g2/csrc/u8x8_d_st7920.c ****   /* pixel_height = */ 32
 174:u8g2/csrc/u8x8_d_st7920.c **** };
 175:u8g2/csrc/u8x8_d_st7920.c **** 
 176:u8g2/csrc/u8x8_d_st7920.c **** static const u8x8_display_info_t u8x8_st7920_128x64_display_info =
 177:u8g2/csrc/u8x8_d_st7920.c **** {
 178:u8g2/csrc/u8x8_d_st7920.c ****   /* chip_enable_level = */ 1,
 179:u8g2/csrc/u8x8_d_st7920.c ****   /* chip_disable_level = */ 0,
 180:u8g2/csrc/u8x8_d_st7920.c ****   
 181:u8g2/csrc/u8x8_d_st7920.c ****   /* post_chip_enable_wait_ns = */ 5,
 182:u8g2/csrc/u8x8_d_st7920.c ****   /* pre_chip_disable_wait_ns = */ 5,
 183:u8g2/csrc/u8x8_d_st7920.c ****   /* reset_pulse_width_ms = */ 1, 
 184:u8g2/csrc/u8x8_d_st7920.c ****   /* post_reset_wait_ms = */ 6, 
 185:u8g2/csrc/u8x8_d_st7920.c ****   /* sda_setup_time_ns = */ 20,		
 186:u8g2/csrc/u8x8_d_st7920.c ****   /* sck_pulse_width_ns = */  140,	/* datasheet ST7920 */
 187:u8g2/csrc/u8x8_d_st7920.c ****   /* sck_clock_hz = */ 1000000UL,	/* since Arduino 1.6.0, the SPI bus speed in Hz. Should be  10000
 188:u8g2/csrc/u8x8_d_st7920.c ****   /* ST7920+Due work with 1MHz but not with 2MHz, ST7920+Uno works with 2MHz */
 189:u8g2/csrc/u8x8_d_st7920.c ****   /* spi_mode = */ 3,		/* active high, rising edge, 18 Aug 16: changed from 1 to 3 which works for 
 190:u8g2/csrc/u8x8_d_st7920.c ****   /* in theory mode 3 should be correct  */
 191:u8g2/csrc/u8x8_d_st7920.c ****   /* i2c_bus_clock_100kHz = */ 4,
 192:u8g2/csrc/u8x8_d_st7920.c ****   /* data_setup_time_ns = */ 30,
 193:u8g2/csrc/u8x8_d_st7920.c ****   /* write_pulse_width_ns = */ 40,
 194:u8g2/csrc/u8x8_d_st7920.c ****   /* tile_width = */ 16,
 195:u8g2/csrc/u8x8_d_st7920.c ****   /* tile_hight = */ 8,
 196:u8g2/csrc/u8x8_d_st7920.c ****   /* default_x_offset = */ 0,
 197:u8g2/csrc/u8x8_d_st7920.c ****   /* flipmode_x_offset = */ 0,
 198:u8g2/csrc/u8x8_d_st7920.c ****   /* pixel_width = */ 128,
 199:u8g2/csrc/u8x8_d_st7920.c ****   /* pixel_height = */ 64
 200:u8g2/csrc/u8x8_d_st7920.c **** };
 201:u8g2/csrc/u8x8_d_st7920.c **** 
 202:u8g2/csrc/u8x8_d_st7920.c **** uint8_t u8x8_d_st7920_192x32(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
 203:u8g2/csrc/u8x8_d_st7920.c **** {
 201              		.loc 1 203 0
 202              		.cfi_startproc
 203              		@ args = 0, pretend = 0, frame = 0
 204              		@ frame_needed = 0, uses_anonymous_args = 0
 205              	.LVL34:
 206 0000 08B5     		push	{r3, lr}
 207              	.LCFI1:
 208              		.cfi_def_cfa_offset 8
 209              		.cfi_offset 3, -8
 210              		.cfi_offset 14, -4
 204:u8g2/csrc/u8x8_d_st7920.c ****   switch(msg)
 211              		.loc 1 204 0
 212 0002 0929     		cmp	r1, #9
 213 0004 02D0     		beq	.L22
 205:u8g2/csrc/u8x8_d_st7920.c ****   {
 206:u8g2/csrc/u8x8_d_st7920.c ****     case U8X8_MSG_DISPLAY_SETUP_MEMORY:
 207:u8g2/csrc/u8x8_d_st7920.c ****       u8x8_d_helper_display_setup_memory(u8x8, &u8x8_st7920_192x32_display_info);
 208:u8g2/csrc/u8x8_d_st7920.c ****       break;
 209:u8g2/csrc/u8x8_d_st7920.c ****     default:
 210:u8g2/csrc/u8x8_d_st7920.c ****       return u8x8_d_st7920_common(u8x8, msg, arg_int, arg_ptr);
 214              		.loc 1 210 0
 215 0006 FFF7FEFF 		bl	u8x8_d_st7920_common
 216              	.LVL35:
 211:u8g2/csrc/u8x8_d_st7920.c ****   }
 212:u8g2/csrc/u8x8_d_st7920.c ****   return 1;
 213:u8g2/csrc/u8x8_d_st7920.c **** }
ARM GAS  C:\Users\nhantt\AppData\Local\Temp\ccgQ0vsv.s 			page 9


 217              		.loc 1 213 0
 218 000a 08BD     		pop	{r3, pc}
 219              	.LVL36:
 220              	.L22:
 207:u8g2/csrc/u8x8_d_st7920.c ****       break;
 221              		.loc 1 207 0
 222 000c 0249     		ldr	r1, .L23
 223              	.LVL37:
 224 000e FFF7FEFF 		bl	u8x8_d_helper_display_setup_memory
 225              	.LVL38:
 212:u8g2/csrc/u8x8_d_st7920.c **** }
 226              		.loc 1 212 0
 227 0012 0120     		movs	r0, #1
 228 0014 08BD     		pop	{r3, pc}
 229              	.L24:
 230 0016 00BF     		.align	2
 231              	.L23:
 232 0018 00000000 		.word	.LANCHOR3
 233              		.cfi_endproc
 234              	.LFE1:
 236              		.section	.text.u8x8_d_st7920_128x64,"ax",%progbits
 237              		.align	1
 238              		.global	u8x8_d_st7920_128x64
 239              		.syntax unified
 240              		.thumb
 241              		.thumb_func
 242              		.fpu softvfp
 244              	u8x8_d_st7920_128x64:
 245              	.LFB2:
 214:u8g2/csrc/u8x8_d_st7920.c **** 
 215:u8g2/csrc/u8x8_d_st7920.c **** uint8_t u8x8_d_st7920_128x64(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
 216:u8g2/csrc/u8x8_d_st7920.c **** {
 246              		.loc 1 216 0
 247              		.cfi_startproc
 248              		@ args = 0, pretend = 0, frame = 0
 249              		@ frame_needed = 0, uses_anonymous_args = 0
 250              	.LVL39:
 251 0000 08B5     		push	{r3, lr}
 252              	.LCFI2:
 253              		.cfi_def_cfa_offset 8
 254              		.cfi_offset 3, -8
 255              		.cfi_offset 14, -4
 217:u8g2/csrc/u8x8_d_st7920.c ****   switch(msg)
 256              		.loc 1 217 0
 257 0002 0929     		cmp	r1, #9
 258 0004 02D0     		beq	.L31
 218:u8g2/csrc/u8x8_d_st7920.c ****   {
 219:u8g2/csrc/u8x8_d_st7920.c ****     case U8X8_MSG_DISPLAY_SETUP_MEMORY:
 220:u8g2/csrc/u8x8_d_st7920.c ****       u8x8_d_helper_display_setup_memory(u8x8, &u8x8_st7920_128x64_display_info);
 221:u8g2/csrc/u8x8_d_st7920.c ****       break;
 222:u8g2/csrc/u8x8_d_st7920.c ****     default:
 223:u8g2/csrc/u8x8_d_st7920.c ****       return u8x8_d_st7920_common(u8x8, msg, arg_int, arg_ptr);
 259              		.loc 1 223 0
 260 0006 FFF7FEFF 		bl	u8x8_d_st7920_common
 261              	.LVL40:
 224:u8g2/csrc/u8x8_d_st7920.c ****   }
 225:u8g2/csrc/u8x8_d_st7920.c ****   return 1;
ARM GAS  C:\Users\nhantt\AppData\Local\Temp\ccgQ0vsv.s 			page 10


 226:u8g2/csrc/u8x8_d_st7920.c **** }
 262              		.loc 1 226 0
 263 000a 08BD     		pop	{r3, pc}
 264              	.LVL41:
 265              	.L31:
 220:u8g2/csrc/u8x8_d_st7920.c ****       break;
 266              		.loc 1 220 0
 267 000c 0249     		ldr	r1, .L32
 268              	.LVL42:
 269 000e FFF7FEFF 		bl	u8x8_d_helper_display_setup_memory
 270              	.LVL43:
 225:u8g2/csrc/u8x8_d_st7920.c **** }
 271              		.loc 1 225 0
 272 0012 0120     		movs	r0, #1
 273 0014 08BD     		pop	{r3, pc}
 274              	.L33:
 275 0016 00BF     		.align	2
 276              	.L32:
 277 0018 00000000 		.word	.LANCHOR4
 278              		.cfi_endproc
 279              	.LFE2:
 281              		.section	.rodata.u8x8_d_st7920_init_seq,"a",%progbits
 282              		.align	2
 283              		.set	.LANCHOR0,. + 0
 286              	u8x8_d_st7920_init_seq:
 287 0000 FE       		.byte	-2
 288 0001 64       		.byte	100
 289 0002 18       		.byte	24
 290 0003 FE       		.byte	-2
 291 0004 0A       		.byte	10
 292 0005 15       		.byte	21
 293 0006 38       		.byte	56
 294 0007 15       		.byte	21
 295 0008 08       		.byte	8
 296 0009 15       		.byte	21
 297 000a 06       		.byte	6
 298 000b 15       		.byte	21
 299 000c 02       		.byte	2
 300 000d 15       		.byte	21
 301 000e 01       		.byte	1
 302 000f FE       		.byte	-2
 303 0010 04       		.byte	4
 304 0011 19       		.byte	25
 305 0012 FF       		.byte	-1
 306              		.section	.rodata.u8x8_d_st7920_powersave0_seq,"a",%progbits
 307              		.align	2
 308              		.set	.LANCHOR1,. + 0
 311              	u8x8_d_st7920_powersave0_seq:
 312 0000 18       		.byte	24
 313 0001 15       		.byte	21
 314 0002 38       		.byte	56
 315 0003 15       		.byte	21
 316 0004 0C       		.byte	12
 317 0005 19       		.byte	25
 318 0006 FF       		.byte	-1
 319              		.section	.rodata.u8x8_d_st7920_powersave1_seq,"a",%progbits
 320              		.align	2
ARM GAS  C:\Users\nhantt\AppData\Local\Temp\ccgQ0vsv.s 			page 11


 321              		.set	.LANCHOR2,. + 0
 324              	u8x8_d_st7920_powersave1_seq:
 325 0000 18       		.byte	24
 326 0001 15       		.byte	21
 327 0002 38       		.byte	56
 328 0003 15       		.byte	21
 329 0004 08       		.byte	8
 330 0005 19       		.byte	25
 331 0006 FF       		.byte	-1
 332              		.section	.rodata.u8x8_st7920_128x64_display_info,"a",%progbits
 333              		.align	2
 334              		.set	.LANCHOR4,. + 0
 337              	u8x8_st7920_128x64_display_info:
 338 0000 01       		.byte	1
 339 0001 00       		.byte	0
 340 0002 05       		.byte	5
 341 0003 05       		.byte	5
 342 0004 01       		.byte	1
 343 0005 06       		.byte	6
 344 0006 14       		.byte	20
 345 0007 8C       		.byte	-116
 346 0008 40420F00 		.word	1000000
 347 000c 03       		.byte	3
 348 000d 04       		.byte	4
 349 000e 1E       		.byte	30
 350 000f 28       		.byte	40
 351 0010 10       		.byte	16
 352 0011 08       		.byte	8
 353 0012 00       		.byte	0
 354 0013 00       		.byte	0
 355 0014 8000     		.short	128
 356 0016 4000     		.short	64
 357              		.section	.rodata.u8x8_st7920_192x32_display_info,"a",%progbits
 358              		.align	2
 359              		.set	.LANCHOR3,. + 0
 362              	u8x8_st7920_192x32_display_info:
 363 0000 01       		.byte	1
 364 0001 00       		.byte	0
 365 0002 05       		.byte	5
 366 0003 05       		.byte	5
 367 0004 01       		.byte	1
 368 0005 06       		.byte	6
 369 0006 14       		.byte	20
 370 0007 8C       		.byte	-116
 371 0008 40420F00 		.word	1000000
 372 000c 03       		.byte	3
 373 000d 04       		.byte	4
 374 000e 1E       		.byte	30
 375 000f 28       		.byte	40
 376 0010 18       		.byte	24
 377 0011 04       		.byte	4
 378 0012 00       		.byte	0
 379 0013 00       		.byte	0
 380 0014 C000     		.short	192
 381 0016 2000     		.short	32
 382              		.text
 383              	.Letext0:
ARM GAS  C:\Users\nhantt\AppData\Local\Temp\ccgQ0vsv.s 			page 12


 384              		.file 2 "c:\\program files (x86)\\gnu tools arm embedded\\6.2 2016q4\\arm-none-eabi\\include\\mach
 385              		.file 3 "c:\\program files (x86)\\gnu tools arm embedded\\6.2 2016q4\\arm-none-eabi\\include\\sys\
 386              		.file 4 "u8g2/csrc/u8x8.h"
ARM GAS  C:\Users\nhantt\AppData\Local\Temp\ccgQ0vsv.s 			page 13


DEFINED SYMBOLS
                            *ABS*:00000000 u8x8_d_st7920.c
C:\Users\nhantt\AppData\Local\Temp\ccgQ0vsv.s:16     .text.u8x8_d_st7920_common:00000000 $t
C:\Users\nhantt\AppData\Local\Temp\ccgQ0vsv.s:23     .text.u8x8_d_st7920_common:00000000 u8x8_d_st7920_common
C:\Users\nhantt\AppData\Local\Temp\ccgQ0vsv.s:185    .text.u8x8_d_st7920_common:000000b8 $d
C:\Users\nhantt\AppData\Local\Temp\ccgQ0vsv.s:192    .text.u8x8_d_st7920_192x32:00000000 $t
C:\Users\nhantt\AppData\Local\Temp\ccgQ0vsv.s:199    .text.u8x8_d_st7920_192x32:00000000 u8x8_d_st7920_192x32
C:\Users\nhantt\AppData\Local\Temp\ccgQ0vsv.s:232    .text.u8x8_d_st7920_192x32:00000018 $d
C:\Users\nhantt\AppData\Local\Temp\ccgQ0vsv.s:237    .text.u8x8_d_st7920_128x64:00000000 $t
C:\Users\nhantt\AppData\Local\Temp\ccgQ0vsv.s:244    .text.u8x8_d_st7920_128x64:00000000 u8x8_d_st7920_128x64
C:\Users\nhantt\AppData\Local\Temp\ccgQ0vsv.s:277    .text.u8x8_d_st7920_128x64:00000018 $d
C:\Users\nhantt\AppData\Local\Temp\ccgQ0vsv.s:282    .rodata.u8x8_d_st7920_init_seq:00000000 $d
C:\Users\nhantt\AppData\Local\Temp\ccgQ0vsv.s:286    .rodata.u8x8_d_st7920_init_seq:00000000 u8x8_d_st7920_init_seq
C:\Users\nhantt\AppData\Local\Temp\ccgQ0vsv.s:307    .rodata.u8x8_d_st7920_powersave0_seq:00000000 $d
C:\Users\nhantt\AppData\Local\Temp\ccgQ0vsv.s:311    .rodata.u8x8_d_st7920_powersave0_seq:00000000 u8x8_d_st7920_powersave0_seq
C:\Users\nhantt\AppData\Local\Temp\ccgQ0vsv.s:320    .rodata.u8x8_d_st7920_powersave1_seq:00000000 $d
C:\Users\nhantt\AppData\Local\Temp\ccgQ0vsv.s:324    .rodata.u8x8_d_st7920_powersave1_seq:00000000 u8x8_d_st7920_powersave1_seq
C:\Users\nhantt\AppData\Local\Temp\ccgQ0vsv.s:333    .rodata.u8x8_st7920_128x64_display_info:00000000 $d
C:\Users\nhantt\AppData\Local\Temp\ccgQ0vsv.s:337    .rodata.u8x8_st7920_128x64_display_info:00000000 u8x8_st7920_128x64_display_info
C:\Users\nhantt\AppData\Local\Temp\ccgQ0vsv.s:358    .rodata.u8x8_st7920_192x32_display_info:00000000 $d
C:\Users\nhantt\AppData\Local\Temp\ccgQ0vsv.s:362    .rodata.u8x8_st7920_192x32_display_info:00000000 u8x8_st7920_192x32_display_info
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
u8x8_d_helper_display_init
u8x8_cad_SendSequence
u8x8_cad_StartTransfer
u8x8_cad_SendCmd
u8x8_cad_SendData
u8x8_cad_EndTransfer
u8x8_d_helper_display_setup_memory
